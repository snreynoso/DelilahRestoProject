openapi: '3.0.0'
info:
  title: Dalilah Resto
  description: This is a server for a mock resto course project
  version: 1.0.0
  
  contact:
    email: snreynoso@gmail.com

tags:
- name: "User"
  description: "Operations as User"
- name: "Admin"
  description: "Operations as Administrator"

paths:
  /api/users/register:
    post:
      tags:
      - "User"
      summary: "Create user"
      description: "Create a new user profile"
      operationId: "register"
      parameters:
      - in: "body"
        name: "body"
        description: "User information"
        required: true
        schema:
          $ref: "#/components/schemas/UserRegister"
      responses:
        201:
          description: "User created!"
        409:
          description: "Username or email has already exist"
  /api/users/login:
    post:
      tags:
      - "User"
      summary: "User login" 
      description: "User login using its username or email and password"
      operationId: "login"
      parameters:
      - in: "body"
        name: "body"
        description: "Username/Email and Password"
        required: true
        schema:
          $ref: "#/definitions/UserLogin"
      responses:
        200:
          description: "{username} logged in successfully, Role: {role}"
        401:
          description: "Authentication failed"
        409:
          description: "DB Failed"
        
  /api/users/products:
    get:
      tags:
      - "User"
      summary: "Get all products"
      description: "To get all dishes available in the resto"
      operationId: "get products"
      responses:
        200:
          description: JSON with all products
          content:
            JSON:
              schema:
                $ref: '#/components/schemas/Products'
                
        409:
          description: "DB Failed"

components:
  schemas:
    UserRegister:
      type: "object"
      properties:
        username:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        address: 
          type: "string"
        password:
          type: "string"
    
    UserLogin:
      type: "object"
      properties:
        login: 
          type: "string"
        password:
          type: "string"
    
    ProductsList:
      type: "object"
      properties:
        name:
          type: "string"
        price:
          type: "integer"
  
    Products:  
      type: array  
      items:
        type: object
        properties:
          name:
            type: string
          price:
            type: integer
      example:
        - name: Pizza
          price: 300
        - name: Sandwich
          price: 120
        - name: Salad
          price: 230
    